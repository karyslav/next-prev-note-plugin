/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => PrevNextNotePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var PrevNextNotePlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.addRibbonIcon("arrow-left", "Previous Note", () => this.navigate(-1));
    this.addRibbonIcon("arrow-right", "Next Note", () => this.navigate(1));
    this.addCommand({
      id: "navigate-previous-note",
      name: "Navigate to Previous Note",
      callback: () => this.navigate(-1),
      hotkeys: [
        {
          modifiers: ["Ctrl", "Shift"],
          key: "ArrowLeft"
        }
      ]
    });
    this.addCommand({
      id: "navigate-next-note",
      name: "Navigate to Next Note",
      callback: () => this.navigate(1),
      hotkeys: [
        {
          modifiers: ["Ctrl", "Shift"],
          key: "ArrowRight"
        }
      ]
    });
  }
  navigate(direction) {
    const currentFile = this.app.workspace.getActiveFile();
    if (!currentFile || !(currentFile instanceof import_obsidian.TFile))
      return;
    const parentFolder = currentFile.parent;
    if (!parentFolder)
      return;
    const siblings = parentFolder.children.filter((file) => file instanceof import_obsidian.TFile && file.extension === "md");
    siblings.sort((a, b) => a.basename.localeCompare(b.basename));
    const currentIndex = siblings.indexOf(currentFile);
    const newIndex = (currentIndex + direction + siblings.length) % siblings.length;
    const targetFile = siblings[newIndex];
    if (targetFile instanceof import_obsidian.TFile) {
      this.app.workspace.getLeaf().openFile(targetFile);
    }
  }
};
